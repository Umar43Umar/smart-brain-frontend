{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\smartbrain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\n// import Clarifai from 'clarifai';\n\n// const app = new Clarifai.App({\n//   apiKey: '851885a104204a2191f730b890d7e6bf'\n// });\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PAT = '851885a104204a2191f730b890d7e6bf';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'nzxs15syr1vg';\nconst APP_ID = 'Myfirstapplication';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n      }\n    }\n  }]\n});\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(function (response) {\n        console.log(response.outputs[0].data.regions[0].regions_info.boudingbox);\n      }, function (err) {});\n    };\n    this.state = {\n      input: '',\n      imageUrl: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"circle\",\n        bg: {\n          position: \"fixed\",\n          zIndex: -1,\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","FaceRecognition","Logo","Rank","ParticlesBg","ImageLinkForm","jsxDEV","_jsxDEV","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","result","console","log","catch","error","App","constructor","onInputChange","event","setState","input","target","value","onButtonSubmit","imageUrl","state","app","models","predict","Clarifai","FACE_DETECT_MODEL","outputs","data","regions","regions_info","boudingbox","err","render","className","children","type","bg","position","zIndex","top","left","right","bottom","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Lenovo/Desktop/smartbrain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\n// import Clarifai from 'clarifai';\n\n// const app = new Clarifai.App({\n//   apiKey: '851885a104204a2191f730b890d7e6bf'\n// });\n    \n      ///////////////////////////////////////////////////////////////////////////////////////////////////\n      // In this section, we set the user authentication, user and app ID, model details, and the URL\n      // of the image we want as an input. Change these strings to run your own example.\n      //////////////////////////////////////////////////////////////////////////////////////////////////\n\n      // Your PAT (Personal Access Token) can be found in the portal under Authentification\n      const PAT = '851885a104204a2191f730b890d7e6bf';\n      // Specify the correct user_id/app_id pairings\n      // Since you're making inferences outside your app's scope\n      const USER_ID = 'nzxs15syr1vg';       \n      const APP_ID = 'Myfirstapplication';\n      // Change these to whatever model and image URL you want to use\n      const MODEL_ID = 'face-detection';    \n      const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n      ///////////////////////////////////////////////////////////////////////////////////\n      // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      ///////////////////////////////////////////////////////////////////////////////////\n\n      const raw = JSON.stringify({\n          \"user_app_id\": {\n              \"user_id\": USER_ID,\n              \"app_id\": APP_ID\n          },\n          \"inputs\": [\n              {\n                  \"data\": {\n                      \"image\": {\n                          \"url\": IMAGE_URL\n                      }\n                  }\n              }\n          ]\n      });\n\n      const requestOptions = {\n          method: 'POST',\n          headers: {\n              'Accept': 'application/json',\n              'Authorization': 'Key ' + PAT\n          },\n          body: raw\n      };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + \"/outputs\", requestOptions)\n          .then(response => response.text())\n          .then(result => console.log(result))\n          .catch(error => console.log('error', error));\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageUrl:''\n    }\n  }\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});    \n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input)\n      .then(\n          function(response) {\n            console.log(response.outputs[0].data.regions[0].regions_info.boudingbox);\n          },\n          function(err){\n\n          }\n      );\n  }     \n  render(){\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"circle\" bg={{position: \"fixed\", zIndex: -1, top: 0, left: 0, right: 0, bottom: 0}} />\n        <Navigation />  \n        <Logo />   \n        <Rank /> \n        <ImageLinkForm \n          onInputChange={this.onInputChange}\n          onButtonSubmit={this.onButtonSubmit}/>\n        <FaceRecognition imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}